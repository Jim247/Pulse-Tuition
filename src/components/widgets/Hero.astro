---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative not-prose bg-sky-900" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto ">
    <div
      class="intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
    >
      {image && (
        <div class="relative w-full lg:max-w-3xl mx-auto">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              class="w-full h-auto rounded-none"
              widths={[200, 384, 512, 1024]}
              sizes="100vw"
              loading="eager"
              {...image}
            />
          )}
        </div>
      )}
    </div>
    <div class="text-center pb-8 md:pb-12 max-w-4xl mx-auto py-4">
      {tagline && (
        <p
          class="text-base text-white font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
          set:html={tagline}
        />
      )}
      {title && (
        <h1
          class="text-3xl text-white md:text-4xl lg:text-3xl text-center font-bold leading-tighter tracking-tighter mb-4 font-heading intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
          set:html={title}
        />
      )}
      <div class="text-white max-w-3xl mx-auto">
        {subtitle && (
          <p
            class="text-lg text-white mb-6 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
            set:html={subtitle}
          />
        )}
        {actions && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )}
      </div>
      {content && <Fragment set:html={content} />}
    </div>
  </div>
</section>
