---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

const {
  title = '',
  subtitle = '',
  tagline = '',
  items = [],
  id,
  isDark = false,
  classes = {},
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`}
  bgColor="olivegreen"
>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="space-y-4">
    {items.map((item: { title: string; description: string }, index: number) => (
      <div
        class="faq-item border rounded-md overflow-hidden"
        data-key={index}
      >
        <!-- Title -->
        <button
          class="faq-button w-full text-left px-4 py-3 bg-white font-semibold font-logo flex justify-between items-center"
          data-index={index}
        >
          <span>{item.title}</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="faq-icon h-5 w-5 transition-transform duration-200"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>
        <!-- Collapsible Description -->
        <div
          class="faq-description px-4 py-2 text-gray-700 bg-white overflow-hidden transition-all duration-300 ease-in-out"
          style="max-height: 0; opacity: 0; padding: 0;"
        >
          {item.description}
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const faqButtons = document.querySelectorAll('.faq-button');

    faqButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const parent = button.closest('.faq-item');
        if (!parent) return;

        const description = parent.querySelector('.faq-description');
        const icon = button.querySelector('.faq-icon');

        if (description instanceof HTMLElement) {
          // Check if currently open
          const isOpen = description.style.maxHeight && description.style.maxHeight !== '0px';

          if (isOpen) {
            // Collapse
            description.style.maxHeight = '0';
            description.style.opacity = '0';
            description.style.padding = '0';
          } else {
            // Expand
            description.style.maxHeight = 'none';
            description.style.opacity = '1';
            description.style.padding = '0.5rem 1.5rem';
          }

          // Rotate the icon
          if (icon) {
            icon.classList.toggle('rotate-180', !isOpen);
          }
        }
      });
    });
  });
</script>
