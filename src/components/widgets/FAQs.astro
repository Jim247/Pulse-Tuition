---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

const {
  title = '',
  subtitle = '',
  tagline = '',
  items = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="space-y-4">
    {items.map((item: { title: string; description: string }, index: number) => (
      <div class="faq-item border rounded-md overflow-hidden" key={index}>
        <!-- Title -->
        <button
          class="faq-button w-full text-left px-4 py-3 bg-gray-100 font-semibold flex justify-between items-center"
          data-index={index}
        >
          <span>{item.title}</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="faq-icon h-5 w-5 transition-transform duration-200"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        <!-- Collapsible Description -->
        <div 
          class="faq-description px-4 py-2 text-gray-700 bg-white overflow-hidden transition-all duration-300 ease-in-out"
          style="max-height: 0px; opacity: 0; padding: 0;"
        >
          {item.description}
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>

<script>
  const faqButtons = document.querySelectorAll('.faq-button');

  faqButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const parent = button.closest('.faq-item');
      if (!parent) return;
      const description = parent.querySelector('.faq-description');
      const icon = parent.querySelector('.faq-icon');

      // Ensure 'description' is treated as an HTMLElement
      if (description instanceof HTMLElement) {
        // Check if the description is already open
        const isOpen = description.style.maxHeight !== '0px'; // Checking if max-height is 0px

        if (isOpen) {
          // Collapse
          description.style.maxHeight = '0'; // Collapse to height 0
          description.style.opacity = '0';   // Fade out
          description.style.padding = '0';   // Remove padding when collapsed
        } else {
          // Expand
          description.style.maxHeight = '100px'; // Set to the scroll height
          description.style.opacity = '1';  // Fade in
          description.style.padding = '0.5rem 1.5rem'; // Add padding when expanded
        }

        // Rotate the icon
        if (icon) {
          icon.classList.toggle('rotate-180', !isOpen);
        }
      }
    });
  });
</script>
