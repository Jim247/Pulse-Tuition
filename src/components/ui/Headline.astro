---
import type { Headline as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import { Icon } from 'astro-icon/components';

const {
  title = Astro.slots.render('title'),
  subtitle = Astro.slots.render('subtitle'),
  tagline,
  link = Astro.slots.render('link'),
  icon, // If it's a string, we can use it for Icon name
  defaultIcon, // Also expected to be a string
  classes = {},
} = Astro.props;

const {
  container: containerClass = 'max-w-3xl',
  title: titleClass = 'text-xl md:text-4xl ',
  subtitle: subtitleClass = 'text-lg',
  icon: defaultIconClass = 'text-center',
} = classes;
---

{
  (title || subtitle || tagline) && (
    <div class={twMerge('md:mx-auto md:mb-12 text-center justify-center', containerClass)}>
      {tagline && (
        <p
          class="text-base text-center text-secondary text-sky-900 font-bold tracking-wide uppercase"
          set:html={tagline}
        />
      )}

      {/* If icon or defaultIcon are valid strings, use them. Otherwise skip. */}
      {typeof icon === 'string' ? (
        <div class="flex justify-center items-left">
          <Icon name={icon} class={twMerge('w-16 h-16 stroke-1 text-sky-900', defaultIconClass)} />
        </div>
      ) : typeof defaultIcon === 'string' ? (
        <div class="flex justify-center  items-left">
          <Icon name={defaultIcon} class={twMerge('w-16 h-16 stroke-1 text-sky-900', defaultIconClass)} />
        </div>
      ) : null}

      {title && (
        <h2
          class={twMerge(
            'font-bold leading-tighter tracking-tighter font-heading text-heading text-center text-3xl pt-5',
            titleClass
          )}
          set:html={title}
        />
      )}

      {subtitle && <p class={twMerge('mt-2 text-muted mb-10 text-center', subtitleClass)} set:html={subtitle} />}

      {link && <div class="mt-2" set:html={link} />}
    </div>
  )
}
